{
  "_from": "node-input-validator",
  "_id": "node-input-validator@3.3.0",
  "_inBundle": false,
  "_integrity": "sha512-Q3bwn6vfUHd5c/MOpPNZ27w96xBzRXqiXBGf9PMV0Ea+TfNMF2Uuf39XPtxyhf8RpdwtcXWyP5Cf63wFyiU3VQ==",
  "_location": "/node-input-validator",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-input-validator",
    "fetchSpec": "latest",
    "name": "node-input-validator",
    "raw": "node-input-validator",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-input-validator/-/node-input-validator-3.3.0.tgz",
  "_shasum": "f896b48b05987bb6f3958e7071b0dd65b3ecde30",
  "_shrinkwrap": null,
  "_spec": "node-input-validator",
  "_where": "/home/mohit/Desktop/vscode/muj",
  "author": {
    "email": "artisangang@gmail.com",
    "name": "Harcharan Singh"
  },
  "bugs": {
    "url": "https://github.com/artisangang/node-input-validator/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Jakub Nietrzeba",
      "url": "https://github.com/gluth"
    },
    {
      "name": "Sergi Baños",
      "url": "https://github.com/SergiBanos"
    },
    {
      "name": "Nitin Mehra",
      "url": "https://github.com/cybersultan"
    }
  ],
  "dependencies": {
    "file-type": "^10.11.0",
    "mime-types": "^2.1.24",
    "moment": "^2.24.0",
    "read-chunk": "^3.2.0",
    "validator": "^10.11.0"
  },
  "deprecated": false,
  "description": "validation library for nodejs, inspired by laravel.",
  "devDependencies": {
    "@types/mocha": "^5.2.7",
    "@types/moment": "^2.13.0",
    "@types/validator": "^10.11.1",
    "coveralls": "^3.0.4",
    "eslint": "^5.16.0",
    "istanbul": "^1.1.0-alpha.1",
    "mocha": "^5",
    "mocha-lcov-reporter": "^1.3.0",
    "ncp": "^2.0.0",
    "should": "^13.2.3"
  },
  "engines": {
    "node": ">=7.6"
  },
  "homepage": "https://github.com/artisangang/node-input-validator#readme",
  "keywords": [
    "data validation",
    "express",
    "file validation",
    "form validation",
    "form validator",
    "image",
    "input validation",
    "input validator",
    "koa",
    "laravel",
    "mimes",
    "node validator",
    "validation",
    "validator",
    "validator for js"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "node-input-validator",
  "optionalDependencies": {},
  "readme": "# Validation Library\r\n\r\n\r\n[![NPM version][npm-image]][npm-url]\r\n[![build status][travis-image]][travis-url]\r\n[![Known Vulnerabilities](https://snyk.io/test/npm/node-input-validator/badge.svg)](https://snyk.io/test/npm/node-input-validator)\r\n[![Coverage Status](https://coveralls.io/repos/github/artisangang/node-input-validator/badge.svg)](https://coveralls.io/github/artisangang/node-input-validator)\r\n[![David deps][david-image]][david-url]\r\n[![node version][node-image]][node-url]\r\n\r\n[travis-image]: https://api.travis-ci.org/artisangang/node-input-validator.svg?branch=master\r\n[travis-url]: https://travis-ci.org/artisangang/node-input-validator\r\n\r\n[david-image]: https://david-dm.org/artisangang/node-input-validator.svg?style=flat-square\r\n[david-url]: https://david-dm.org/artisangang/node-input-validator\r\n\r\n[npm-image]: https://img.shields.io/npm/v/node-input-validator.svg?style=flat-square\r\n[npm-url]: https://npmjs.org/package/node-input-validator\r\n[node-image]: https://img.shields.io/badge/node.js-%3E=_7.6-green.svg?style=flat-square\r\n[node-url]: http://nodejs.org/download/\r\n\r\nValidation library for node.js\r\n\r\nNode Input Validator is a validation library for node.js. You can also extend library to add custom rules.\r\n\r\n## Installation\r\n\r\n```shell\r\nnpm install --save node-input-validator\r\n```\r\n\r\n## Usage\r\n\r\nSimple Example  \r\n\r\n```javascript\r\n\r\nconst v = require('node-input-validator');\r\n\r\nlet validator = new v({name:''}, {name:'required|minLength:5'});\r\n\r\nvalidator.check().then(function (matched) {\r\n    console.log(matched);\r\n    console.log(validator.errors);\r\n});\r\n\r\n```\r\n\r\nExample usage in express application\r\n\r\n```javascript\r\n\r\nconst v = require('node-input-validator');\r\n\r\napp.post('login', function (req, res) {\r\n\r\n    let validator = new v( req.body, {\r\n        email:'required|email',\r\n        password: 'required'\r\n    });\r\n\r\n    validator.check().then(function (matched) {\r\n        if (!matched) {\r\n            res.status(422).send(validator.errors);\r\n        }\r\n    });\r\n\r\n})\r\n\r\n```\r\n\r\nWith async/await\r\n\r\n```javascript\r\n\r\nconst v = require('node-input-validator');\r\n\r\nrouter.post('login', async function (ctx) {\r\n\r\n    let validator = new v( ctx.request.body, {\r\n        email:'required|email',\r\n        password: 'required'\r\n        });\r\n\r\n    let matched = await validator.check();\r\n\r\n    if (!matched) {\r\n        ctx.status = 422;\r\n        ctx.body = validator.errors;\r\n        return;\r\n    }\r\n\r\n})\r\n\r\n```\r\n\r\n### Objects Validation\r\n\r\n```javascript\r\n    let v = new Validator({\r\n            product: {id:'1',name:'',price:'', active:'yes'}\r\n        },\r\n        {\r\n            'product': 'required|object',\r\n            'product.id': 'required|integer',\r\n            'product.name': 'required',\r\n            'product.price': 'required|integer',\r\n            'product.active': 'required|integer'\r\n        });\r\n\r\n    let matched = await v.check();\r\n```\r\n\r\n### Array Validation\r\n\r\n```javascript\r\n    let v = new Validator({\r\n            roles: ['admin', 'manager', 'member']\r\n        },\r\n        {\r\n            'roles': 'required|array',\r\n            'roles.*': 'required|string'\r\n        });\r\n\r\n    let matched = await v.check();\r\n```\r\n\r\n```javascript\r\n    let v = new Validator({\r\n            plan: [\r\n                {price:'25',title:'OK'},\r\n                {price:'',title:''},\r\n                {price:'30'},\r\n                {price:'',title:'Title'}\r\n            ]\r\n        },\r\n        {\r\n            'plan': 'required|array',\r\n            'plan.*.price': 'required|integer',\r\n            'plan.*.title': 'required'\r\n        });\r\n\r\n    let matched = await v.check();\r\n```\r\n\r\n### Array of rules\r\n\r\nUsefull in case of using colon (:) / pipe delimiters in rules like dateFormat / regex.\r\n\r\n```javascript\r\n\r\n let v = Validator.make(\r\n            { uid: 'abcdefghi' },\r\n            {\r\n                uid: ['required', ['lengthBetween', '5', '8'], 'alpha']\r\n            });\r\nlet matched = await v.check();\r\n\r\n```\r\n\r\n## Extending\r\n\r\nPlaceholder in messages, :attribute will be replaced with field name, :value with field value and :arg0, :arg1 ...n with arguments passed to rule.\r\n\r\n### Add/Update rule based messages\r\n\r\n```javascript\r\n\r\nValidator.messages({\r\n    required: 'The :attribute field must not be empty.',\r\n    email: 'E-mail must be a valid email address.',\r\n    even: 'The value of the field must be even number.',\r\n    status: 'Invalid status'\r\n});\r\n\r\n```\r\n\r\n### Add custom messages\r\n\r\n```javascript\r\n\r\n//Note: Default language is English (en).\r\n\r\nValidator.customMessages({\r\n    'username.required': 'When username attribute required rule failed.',\r\n    username: 'Default message for username attribute.'\r\n});\r\n\r\n```\r\n\r\n### Add/Update rules default message in another language\r\n\r\nCurrenlty this package only support english, But you can easliy add messages in another language.\r\n\r\n```javascript\r\n\r\nValidator.messages({\r\n    required: ':attribute ਫੀਲਡ ਖਾਲੀ ਨਹੀਂ ਹੋਣਾ ਚਾਹੀਦਾ.',\r\n}, 'pb');\r\n\r\n```\r\n\r\n#### Set default language\r\n\r\n```javascript\r\n\r\nconst validator = require('node-input-validator');\r\nvalidator.setLang('pb');\r\n\r\n```\r\n\r\n### Using Custom Attribute Names\r\n\r\n```javascript\r\n\r\nconst validator = require('node-input-validator');\r\n\r\nlet v = new validator( ctx.request.body, {\r\n            phone:'required',\r\n            dob: 'required'\r\n        });\r\n\r\nv.setAttributeNames({\r\n    phone: 'phone number',\r\n    dob: 'Date of Birth'\r\n});\r\n\r\n```\r\n\r\nIn error messages you will get \"phone number\" instead of phone. For Example: in case required rule failed, Error message will be: The phone number field is mandatory.\r\n\r\n### Add your own custom validation rules\r\n\r\n```javascript\r\n\r\nValidator.extend('even', async function (field, value) {\r\n\r\n    if( (parseInt(value) % 2) == 0 ){\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n\r\n});\r\n\r\nValidator.extend('status', async function (field, value, args) {\r\n\r\n    if( args.indexOf(value) >= 0 ){\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n\r\n});\r\n\r\n```\r\n\r\nSome example of using database in rules\r\n\r\n```javascript\r\n\r\n// use this rules as unique:seed\r\n// unique:<Mongoose Model>,<Field Name>,<ID to Ignore, This is optional>\r\n\r\nconst Validator = require('node-input-validator');\r\nconst mongoose = require('mongoose');\r\n\r\nValidator.extend('unique', async function (field, value, args) {\r\n\r\n// default field is email in this example\r\n    let filed = args[1] || 'email';\r\n\r\n    let condition = {};\r\n\r\n    condition[filed] = value;\r\n\r\n    // add ignore condition\r\n    if (args[2]) {\r\n        condition['_id'] = { $ne: mongoose.Types.ObjectId(args[2]) };\r\n    }\r\n\r\n    let emailExist = await mongoose.model(args[0]).findOne(condition).select(field);\r\n\r\n    // email already exists\r\n    if (emailExist) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n\r\n});\r\n\r\n// example usage of upper extended rule\r\n\r\nnew Validator({\r\n    email: 'required|email|unique:User,email'\r\n}, inputs);\r\n\r\n// in case to ignore specific id\r\n\r\nnew Validator({\r\n    email: 'required|email|unique:User,email,5c2f29e9cefa7718a54f8ff1'\r\n}, inputs);\r\n\r\n```\r\n\r\n**For Koa2**\r\nAttach koa middleware\r\n\r\n```javascript\r\n\r\nconst validator = require('node-input-validator');\r\n\r\n// keep this under your error handler\r\napp.use(validator.koa());\r\n\r\n```\r\n\r\nThen in controller\r\n\r\n```javascript\r\n\r\n// if validation fails, this will auto abort request with status code 422 and errors in body\r\nawait ctx.validate({\r\n    name:'required|maxLength:50', \r\n    username:'required|maxLength:15',\r\n    email:'required|email',\r\n    password:'required'\r\n});\r\n\r\n// validation passes\r\n// do some code\r\n\r\n```\r\n\r\nWith custom inputs\r\n\r\n```javascript\r\n\r\n// if validation fails, this will auto abort request with status code 422 and errors in body\r\nawait ctx.validate({\r\n    name:'required|maxLength:50', \r\n    username:'required|maxLength:15',\r\n    email:'required|email',\r\n    password:'required'\r\n}, ctx.request.body);\r\n\r\n// validation passes\r\n// do some code\r\n\r\n```\r\n\r\nWith custom inputs and custom messages\r\n\r\n```javascript\r\n\r\n// if validation fails, this will auto abort request with status code 422 and errors in body\r\nawait ctx.validate({\r\n    name:'required|maxLength:50', \r\n    username:'required|maxLength:15',\r\n    email:'required|email',\r\n    password:'required'\r\n}, ctx.request.body, {email: 'E-mail is required'});\r\n\r\n// validation passes\r\n// do some code\r\n\r\n```\r\n\r\nIn case you wants control over validator, Then use\r\n\r\n```javascript\r\n\r\n// if validation fails, this will auto abort request with status code 422 and errors in body\r\nconst v = await ctx.validator({\r\n    name:'required|maxLength:50', \r\n    username:'required|maxLength:15',\r\n    email:'required|email',\r\n    password:'required'\r\n});\r\n\r\n// in case validation fails\r\nif (v.fails()) {\r\n    ctx.status = 422;\r\n    ctx.body = v.errors;\r\n    return;\r\n}\r\n\r\n// do some code\r\n\r\n```\r\n\r\nThis method (ctx.validator(rules,inputs={}, messages={})) also support same options as like ctx.validate\r\n\r\n## Rules\r\n\r\nYou can check test cases for rules usage/examples.\r\n\r\n**required**  \r\nThe field under validation cannot be left blank.\r\n\r\n```javascript\r\n\r\n// required rule validation fails\r\nlet v = new Validator({name:''}, {name:'required'});\r\n\r\n```\r\n\r\n**requiredIf:field,value**  \r\nThe field under validation cannot be left blank, if provided seed value equals to provided value seed.\r\n\r\n```javascript\r\n// requiredIf rule validation fails, becoz email cannot be left blank if age is 16\r\nlet v = new Validator({email:'', age:'16'}, {email:'requiredIf:age,16'});\r\n```\r\n\r\n**requiredNotIf:field,value**  \r\nThe field under validation may left blank, if provided seed value equals to provided value seed.\r\n\r\n```javascript\r\n// requiredNotIf rule validation fails, becoz transport must be present in case age is not 16\r\nlet v = new Validator({transport:'', age:'15'}, {transport:'requiredNotIf:age,16'});\r\n```\r\n\r\n**requiredWith:field**  \r\n**requiredWith:field,field,field**  \r\n The field under validation may required in case provided seed present.\r\n\r\n```javascript\r\n// requiredWith rule validation fails, becoz email must in case age present.\r\nlet v = new Validator({email:'', age:'17'}, {email:'requiredWith:age'});\r\n```\r\n\r\n**requiredWithout:field**  \r\n**requiredWithout:field,field,field**  \r\nThe field under validation may left blank in case provided seed present.\r\n\r\n```javascript\r\n// requiredWithout rule validation fails, becoz email is must in case phone,pan not provided.\r\nlet v = new Validator({email:'', username:''}, {email:'requiredWithout:phone,pan', username:'requiredWithout:email'});\r\n```\r\n\r\n**accepted**  \r\nThe field under validation must be yes, on, 1, or true.\r\n\r\n**after:YYYY-MM-DD**  \r\nThe field under validation must be date after provided seed.\r\n\r\n```javascript\r\nlet v = new Validator({joining:''}, {joining:'required|after:2018-02-10'});\r\n```\r\n\r\n**alpha**  \r\nThe field under validation must be entirely alphabetic characters.\r\n\r\n**alphaDash**  \r\nThe field under validation may have alpha-numeric characters, as well as dashes and underscores.\r\n\r\n**alphaNumeric**  \r\nThe field under validation only contains letters and numbers.\r\n\r\n**array**  \r\nThe field under validation must be an array.\r\n\r\n**ascii**  \r\nThe field under validation only contains ascii characters.\r\n\r\n**base64**  \r\nThe field under validation must be valid base64 encoded string.\r\n\r\n**between:min,max**  \r\nThe field under validation must be betwwen min and max seed. This will work with number valus as well as with arrays using array count.\r\n\r\n**boolean**  \r\n**boolean:custom**\r\nThe field under validation must be boolean (true, false, 'true', 'false', 0, 1, '0', '1') or in custom seed.\r\n\r\n**contains:value**  \r\nThe field under validation must contains provided seeds.\r\n\r\n```javascript\r\nlet v = new Validator({bio:'My profile is: example.com'}, {bio:'required|contains:profile'});\r\n```\r\n\r\n**creditCard**  \r\nThe field under validation must be valid credit card string.\r\n\r\n**date**  \r\nThe field under validation must be a valid date (YYYY-MM-DD).\r\n\r\n**dateAfterToday:number,unit**  \r\nThe field under validation must be a valid date after provided seed.\r\n\r\n```javascript\r\nlet v = new Validator({expiry:'2019-02-28'}, {expiry:'required|dateAfterToday:2,days'});\r\n```\r\n\r\nsee moment docs(https://momentjs.com/docs/#/manipulating/add/) for supported units.\r\n\r\n**dateBeforeToday:number,unit**  \r\nThe field under validation must be a valid date before provided seed.\r\n\r\n```javascript\r\nlet v = new Validator({valid:'2019-02-28'}, {valid:'required|dateBeforeToday:2,months'});\r\n```\r\n\r\n**dateFormat:format**  \r\nThe field under validation must match the given date format.\r\n\r\nNote: use array of rules style declaration to deal with colon (:) in time formats.\r\n\r\n```javascript\r\nlet v = new Validator({dob:''}, {dob:'required|dateFormat:YYYY-MM-DD'});\r\n```  \r\n\r\nCheck https://momentjs.com/docs/ for supported formats\r\n\r\n**decimal**  \r\nThe field under validation must be a decimal value.\r\n\r\n**digits:length**  \r\nThe field under validation must be numeric and must have an exact length.\r\n\r\n**digitsBetween:min,max**  \r\nThe field under validation must have a length between provided min and max values.\r\n\r\n```javascript\r\nlet v = new Validator({phone:''}, {age:'required|digitsBetween:10,13'});\r\n```\r\n\r\n**domain**  \r\nThe field under validation must a qualified domain.\r\n\r\n**email**  \r\nThe field under validation must be formatted as an e-mail address.\r\n\r\n**equals**  \r\nThe field under validation must be equal to given value.\r\n\r\n**hash:algo**  \r\nThe field under validation must be a valid hash as per provided seed.\r\n\r\n```javascript\r\n let v = new Validator({ \r\n        id: 'fd1baf48377a9f644f9af89abbee29f6'\r\n     },\r\n     {\r\n         id: 'required|hash:md5'\r\n     });\r\n\r\n```\r\n\r\nSupported algorithms: md4, md5, sha1, sha256, sha384, sha512, ripemd128, ripemd160, tiger128, tiger160, tiger192, crc32, crc32b.\r\n\r\n**hex**  \r\nThe field under validation must be valid hex.\r\n\r\n**hexColor**  \r\nThe field under validation must be valid hex color code.\r\n\r\n**in:a,b...n**  \r\nThe field under validation must exist in the given list of values.\r\n\r\n```javascript\r\nlet v = new Validator({status:''}, {status:'required|in:active,inactive,blocked'});\r\n```\r\n\r\n**integer**  \r\nThe field under validation must be an integer.\r\n\r\n**ip**  \r\nThe field under validation must be an IP address.\r\n\r\n**iso8601**  \r\nThe field under validation must be valid Iso8601 date.\r\n\r\n**json**\r\nThe field under validation must be a valid JSON string.\r\n\r\n**latLong**\r\nThe field under validation must be a valid latitude-longitude coordinate.\r\n\r\n**lengthBetween:min,max**  \r\nThe field under validation value length must be between provided values.\r\n\r\n```javascript\r\nlet v = new Validator({age:''}, {age:'required|between:17,30'});\r\n```\r\n\r\n**macAddress**  \r\nThe field under validation should be a valid Mac Address.\r\n\r\n```javascript\r\nlet v = new Validator({ id: '00:14:22:01:23:45' }, { id: 'required|macAddress' });\r\n;\r\n```\r\n\r\n**max**  \r\nThe field under validation must be less than given value.\r\n\r\n```javascript\r\nlet v = new Validator({age:''}, {age:'required|max:35'});\r\n```\r\n\r\n**maxLength**\r\nThe length of field under validation should be less than given value.\r\n\r\n```javascript\r\nlet v = new Validator({username:''}, {username:'required|max:10'});\r\n```\r\n\r\n**mime**  \r\nThe file under validation must have a MIME type corresponding to one of the listed extensions.\r\n\r\n**min**\r\nThe field under validation must be greater than given value.\r\n\r\n```javascript\r\nlet v = new Validator({age:''}, {age:'required|min:21'});\r\n```\r\n\r\n**minLength**  \r\nThe length of field under validation should be greater than given value.\r\n\r\n```javascript\r\nlet v = new Validator({username:''}, {username:'required|max:10|min:5'});\r\n```\r\n\r\n**mongoId**  \r\nThe field under validation should be a valid MongoDB ID.\r\n\r\n```javascript\r\nlet v = new Validator({id:''}, {id:'required|mongoId'});\r\n```\r\n\r\n**notContains:value**  \r\nThe field under validation may not contains provided seeds.\r\n\r\n**notIn**  \r\nThe field under validation must not exist in the given list of values.\r\n\r\n```javascript\r\nlet v = new Validator({status:''}, {status:'required|notIn:inactive,blocked'});\r\n```\r\n\r\n**nullable**  \r\nThe field under validation is required only is not left empty.\r\n\r\n**numeric**  \r\nThe field under validation must be numeric.\r\n\r\n**phoneNumber**  \r\nThe field under validation must be a valid phone number.\r\n\r\n**regex**  \r\nThe field under validation must match the given regular expression.\r\n\r\nNote: Currently regex rules break on using colon (:) or pipe delimiters. Use array of rules style declaration instead of string.\r\n\r\n**same**  \r\nThe given field must match the field under validation.\r\n\r\n```javascript\r\nlet v = new Validator({password:''}, {password:'required|same:confirm_password'});\r\n```\r\n\r\n**size:max**\r\n**size:max,min**  \r\nThe file field under validation must have a file size matching the given maximum value or should be between size range.\r\nSupported unit sufix: b,kb/k,mb/m,gb/g.\r\n\r\n```javascript\r\n// in below case, image file size should be under 4kb limit\r\nlet v = new Validator({image:''}, {image:'required|size:4kb'});\r\n```\r\n\r\n```javascript\r\n// in below case, image file size should be between 1kb - 4kb\r\nlet v = new Validator({image:''}, {image:'required|size:4kb,1kb'});\r\n```\r\n\r\n```javascript\r\nlet v = new Validator({video:''}, {video:'required|size:10mb'});\r\n```\r\n\r\n**sometimes**  \r\nThe field under validation is required if present.\r\n\r\n**string**  \r\nThe field under validation must be string.\r\n\r\n**url**  \r\nThe field under validation must be a valid URL.\r\n\r\n**Post Rules**\r\nThere is set of rules which can be used to validate constraints of whole input, rather than validity of singular fields.\r\n\r\n```javascript\r\nconst v = require('node-input-validator');\r\n\r\nlet validator = new v({name:''}, {'*': 'any:name,surname'});\r\n\r\nvalidator.check().then(function (matched) {\r\n    console.log(matched);\r\n    console.log(validator.errors);\r\n});\r\n```\r\n\r\nPost validator errors are returned in the `*` key. There is also possibility to add custom function as validator\r\nwith help of `addPostRule` method. Function will be called in context of validator object with input as parameter.\r\n\r\n```javascript\r\nconst v = require('node-input-validator');\r\n\r\nlet v = new Validator({username: 'arnold', password: 'arnold123'}, {});\r\n\r\nv.addPostRule(async function(input) {\r\n\r\n    if (input.password.indexOf(input.username) >= 0) {\r\n        this.validator.addError('password', 'custom', 'Password cannot contain username'); \r\n    }\r\n\r\n});\r\n\r\n```\r\n\r\n**any**\r\nAny of the fields must be present in input.\r\n\r\n**all**\r\nAll of the fields must be present in input.\r\n\r\n### Typescript Support\r\n\r\nTypings expermental  \r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/artisangang/node-input-validator.git"
  },
  "scripts": {
    "cover": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha -- --recursive",
    "coveralls": "node ./node_modules/istanbul/lib/cli.js cover ./node_modules/mocha/bin/_mocha --report lcovonly -- --recursive -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "test": "mocha --recursive"
  },
  "version": "3.3.0"
}
