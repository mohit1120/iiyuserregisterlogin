{
  "_from": "f",
  "_id": "f@1.4.0",
  "_inBundle": false,
  "_integrity": "sha1-SVK0TZzkUc5uz2T4y1A9/iSo/QI=",
  "_location": "/f",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "f",
    "fetchSpec": "latest",
    "name": "f",
    "raw": "f",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/f/-/f-1.4.0.tgz",
  "_shasum": "4952b44d9ce451ce6ecf64f8cb503dfe24a8fd02",
  "_shrinkwrap": null,
  "_spec": "f",
  "_where": "/home/mohit/Desktop/vscode/muj",
  "author": {
    "name": "Keith Horwood"
  },
  "bugs": {
    "url": "https://github.com/poly/f/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Functional Microservice Request Library",
  "devDependencies": {},
  "homepage": "https://github.com/poly/f#readme",
  "license": "MIT",
  "main": "lib/f.js",
  "name": "f",
  "optionalDependencies": {},
  "readme": "# ![f](http://stdlib.com/static/images/f-128.png)\n## Functional Microservice Request Library\n\n`f` is a Functional Microservice Request Library. It's a zero-dependency module\nthat wraps HTTP(S) requests, intended for use with stateless, functional\nmicroservices. It's built to work out-of-the-box with services created using\n[the stdlib microservice registry](https://stdlib.com), but can be\nconfigured to use any gateway (and associated platform or infrastructure provider).\n\n## Installation\n\n### Node.js\n\nFor usage in an existing Node.js project, add it to your dependencies:\n\n```\n$ npm install f\n```\n\nAnd use it with the following line wherever you need it:\n\n```javascript\nconst f = require('f');\n```\n\n### Web\n\nUsing Bower...\n\n```\n$ bower install poly/f\n```\n\nOr, simply copy `web/f.js` to wherever you keep your vendor scripts and include\nit as a script:\n\n```html\n<script src=\"path/to/f.js\"></script>\n```\n\n## How do I use f?\n\n`f` creates HTTP(S) requests following a custom specification that maps very\nclosely to function invocation you're used to (as if it were running in a\n\tnative environment). Let's say we have a microservice running on\n\t[stdlib](https://stdlib.com) that calculates great-circle distances given\n\ttwo sets of coordinates using the [Haversine formula](https://en.wikipedia.org/wiki/Haversine_formula).\n\nThe call to this service using `f`, might look like this;\n\n```javascript\n// Calculate distance from Toronto to San Francisco\nf('polybit/haversine')({\n\tfrom: [43.65, -79.38],\n\tto: [37.77, -122.42]\n}, (err, result) => {\n\n\tconsole.log(result); // logs 3644329 (metres!)\n\n});\n```\n\n## Parameters: Arguments and Keyword Arguments\n\nUsually when we make HTTP requests we think of querystring parameters, form-data,\nurlencoded variables and of course, json. With `f`, our goal is to standardize\nthe way functional microservices are invoked (and deal with parameters) by\nreferencing familiar concepts; function *arguments* and *keyword arguments*.\n\nArguments (`args`) are passed to functions as an array of basic JSON types\n(non-objects); number, boolean, string, null. Keyword arguments are allowed to\nbe anything JSON-serializable (Objects and Arrays). The basic structure for\nfunction calls with `f` is the following;\n\n```javascript\nlet fn = f('route/to/function');\nfn(arg_1, ..., arg_n, {kwarg_1: val_1, ... kwarg_n: val_n}, callback);\n```\n\nThis maps to an HTTP request with the following POST data in the body;\n\n```\n{\n\t\"args\": [arg_1, ..., arg_n],\n\t\"kwargs\": {\n\t\t\"kwarg_1\": val_1,\n\t\t...\n\t\t\"kwarg_n\": val_n\n\t}\n}\n```\n\nWhich should be interpreted by a functional microservice (server-side) as;\n\n```javascript\nmodule.exports = (params, callback) => {\n\t// params.args == [arg_1, ..., arg_n]\n\t// params.kwargs == {kwarg_1: val_1, ..., kwarg_n: val_n}\n\tcallback(null, 'Hello World');\n};\n```\n\n**Note** that every parameter is optional. It's up to whoever creates the\nmicroservice to lay out the expectation of which arguments / keyword arguments\nare supported, which can be done using descriptions on services like\n[stdlib](https://stdlib.com) or [GitHub](https://github.com).\n\n## Sending Files\n\nTo send raw file (`Buffer`) data, simply provide `'file'` as a string to the\nsecond argument when referencing the function:\n\n```javascript\nf('path/to/func', 'file')(new Buffer(0), callback);\n```\n\nThis will send POST data with exactly the `Buffer` contents.\n\n## Configuring Gateway\n\nIf you don't feel like using stdlib's gateway at https://f.stdlib.com/, simply\nconfigure the gateway as follows;\n\n```javascript\nconst f = require('f');\nf.config.gateway = {\n\thost: 'my.host',\n\tport: 8080,\n\tpath: '/'\n};\n```\n\nYou can, alternatively, pass in custom configuration as a third parameter on a\nper-function basis.\n\n```javascript\nlet fn = f('path/to/func', 'json', {host: 'my.host', port: 8080, path: '/'});\nfn(arg0, ..., callback);\n```\n\n## Why Use Microservices?\n\nMicroservices are tremendously useful for offloading computationally\nexpensive tasks from your core infrastructure, or providing standardized\nfunctionality to many different systems (at the cost of a few ms of network latency).\n\nAn example would be image processing. Resizing, cropping and editing may not be\ndone frequently on your webserver, but when it does happen, it can slow everything\ndown. Offloading to a scalable, stateless microservice that your application simply\ncalls via the `f` module is a simple solution.\n\nAnother example would be the haversine distance formula given above. You may\nhave found a great npm package, but what if that service functionality needs\nto be shared across multiple applications written in different languages? Python\nand Ruby are both capable of making simple HTTP requests to a microservice, but\ndo not share packages in common with the Node ecosystem. Microservices solve\nthis problem.\n\nWe plan to have more SDKs out in the coming months. :)\n\n## Where can I find Microservices to use?\n\nYou can find a list of available microservices on [stdlib's search page](https://stdlib.com/search),\nwhere the `f` team (Polybit Inc.) is hard at work creating a central registry\nof microservices for the web. Feel free to test drive a basic service or create\nyour own.\n\nYou can create microservices using the [stdlib CLI tools](https://github.com/poly/stdlib),\nbut microservice development is out of the scope of the `f`\npackage directly. It is handled on a platform and infrastructure provider basis.\n\n## Thanks!\n\nThe `f` package is &copy; 2016 Polybit Inc. and happily MIT licensed.\n\nGo wild! Contributors welcome, but we ask that PRs don't introduce\ndependencies and mostly focus on bugfixes and usability.\n\nSign up for [stdlib: A Standard Library for Microservices](https://stdlib.com).\n\nFollow us on Twitter [@polybit](https://twitter.com/polybit).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/poly/f.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.4.0"
}
